<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iLonge</title>
  
  <subtitle>爱生活，iLonge</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-09-24T19:40:03.171Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ilonge</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typescript 指北</title>
    <link href="http://example.com/2025/09/13/Typescript/"/>
    <id>http://example.com/2025/09/13/Typescript/</id>
    <published>2025-09-13T04:13:50.000Z</published>
    <updated>2025-09-24T19:40:03.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typescript-指北"><a href="#Typescript-指北" class="headerlink" title="Typescript 指北"></a>Typescript 指北</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://www.tslang.cn/docs/handbook/basic-types.html">https://www.tslang.cn/docs/handbook/basic-types.html</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts</span><br></pre></td></tr></table></figure><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><h4 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> isDone: boolean = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> decLiteral: number = 6;</span><br><span class="line"><span class="built_in">let</span> hexLiteral: number = 0xf00d;</span><br><span class="line"><span class="built_in">let</span> binaryLiteral: number = 0b1010;</span><br><span class="line"><span class="built_in">let</span> octalLiteral: number = 0o744;</span><br></pre></td></tr></table></figure><h4 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> name: string = <span class="string">&quot;bob&quot;</span>;</span><br><span class="line"><span class="built_in">let</span> age: number = 37;</span><br><span class="line"><span class="built_in">let</span> sentence: string = `Hello, my name is <span class="variable">$&#123; name &#125;</span>.</span><br><span class="line">I<span class="string">&#x27;ll be $&#123; age + 1 &#125; years old next month.`;</span></span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> list: number[] = [1, 2, 3];</span><br><span class="line"><span class="built_in">let</span> list: Array&lt;number&gt; = [1, 2, 3];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> x: [string, number];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, 10]; // OK</span><br><span class="line">x = [10, <span class="string">&quot;hello&quot;</span>]; // Error</span><br></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="built_in">let</span> c: Color = Color.Green;</span><br></pre></td></tr></table></figure><h4 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> notSure: any = 4;</span><br><span class="line">notSure = <span class="string">&quot;maybe a string instead&quot;</span>;</span><br><span class="line">notSure = <span class="literal">false</span>; // okay, definitely a boolean</span><br></pre></td></tr></table></figure><h4 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> warnUser(): void &#123;</span><br><span class="line">    console.log(<span class="string">&quot;This is my warning message&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> u: undefined = undefined;</span><br><span class="line"><span class="built_in">let</span> n: null = null;</span><br></pre></td></tr></table></figure><h4 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 返回never的函数必须存在无法达到的终点</span><br><span class="line"><span class="keyword">function</span> error(message: string): never &#123;</span><br><span class="line">    throw new Error(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 推断的返回值类型为never</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fail</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> error(<span class="string">&quot;Something failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回never的函数必须存在无法达到的终点</span><br><span class="line"><span class="keyword">function</span> infiniteLoop(): never &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">interface Parent &#123;</span><br><span class="line">    name: string</span><br><span class="line">    age: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface child extends Parent &#123;</span><br><span class="line">    address: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const jibao:child = &#123;</span><br><span class="line">    name: <span class="string">&#x27;wangjingdong&#x27;</span>,</span><br><span class="line">    age: 5,</span><br><span class="line">    address: <span class="string">&#x27;xi`an&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(jibao.name)</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Article &#123;</span><br><span class="line">    public title: string // 公共</span><br><span class="line">    public detail?: string </span><br><span class="line">    <span class="built_in">readonly</span> author: string | number = <span class="string">&#x27;Jonh&#x27;</span> // 只读</span><br><span class="line">    // private intro?: string // 私有</span><br><span class="line">    protected protectedData?: string // 内部受保护的</span><br><span class="line">    // static 静态，是给类的本身，而不是类的实例</span><br><span class="line">    // private protected privateProtectedData: string = <span class="string">&#x27;privateProtectedData&#x27;</span></span><br><span class="line">    constructor (title: string, detail: string ) &#123;</span><br><span class="line">        this.title = title</span><br><span class="line">        this.detail = detail</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const bookA = new Article(<span class="string">&#x27;传奇&#x27;</span>,  <span class="string">&#x27;在那段战火纷飞,饱受苦难的年代，有一位伟大的地主家儿子......&#x27;</span>)</span><br><span class="line">console.log(bookA.author)</span><br><span class="line"></span><br><span class="line">class Mao extends Article &#123;</span><br><span class="line">    public role: string</span><br><span class="line">    constructor (title: string, detail: string, role: string) &#123;</span><br><span class="line">        super(title, detail)</span><br><span class="line">        this.role = role</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const mao = new Mao(<span class="string">&#x27;传奇&#x27;</span>, <span class="string">&#x27;在那段战火纷飞,饱受苦难的年代，有一位伟大的地主家儿子......&#x27;</span>, <span class="string">&#x27;Mr mao&#x27;</span>)</span><br><span class="line">console.log(mao)</span><br></pre></td></tr></table></figure><h4 id="存储器属性"><a href="#存储器属性" class="headerlink" title="存储器属性"></a>存储器属性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class User &#123;</span><br><span class="line">    private _password: string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    get password (): string &#123;</span><br><span class="line">        <span class="built_in">return</span>  <span class="string">&#x27;******&#x27;</span> // this._password</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span> password (value: string) &#123;</span><br><span class="line">        this._password = value</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const userA = new User()</span><br><span class="line">console.log(userA.password)</span><br></pre></td></tr></table></figure><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote&gt;用来作为子类基类去使用，规范格式的&lt;/blockquote&gt;</span><br><span class="line">abstract class Animal &#123;</span><br><span class="line">    name: string</span><br><span class="line">    constructor (name: string) &#123;</span><br><span class="line">        this.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    abstract sayHi (): void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line">    constructor (name: string) &#123;</span><br><span class="line">        super(name)</span><br><span class="line">    &#125;</span><br><span class="line">    sayHi (): void &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;汪汪汪&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const dog = new Dog(<span class="string">&#x27;旺财&#x27;</span>)</span><br><span class="line">dog.sayHi()</span><br></pre></td></tr></table></figure><h4 id="类实现接口"><a href="#类实现接口" class="headerlink" title="类实现接口"></a>类实现接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">interface Fruit &#123;</span><br><span class="line">    color: string</span><br><span class="line">    get taste(): string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Banana &#123;</span><br><span class="line">    price: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 如果使用继承extends,则无法同时继承多个类 */ </span><br><span class="line"></span><br><span class="line">class Apple implements Fruit, Banana &#123;</span><br><span class="line">    color: string = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    price: number = 100</span><br><span class="line">    get <span class="function"><span class="title">taste</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const apple = new Apple()</span><br><span class="line">console.log(apple)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#### 泛型类</span></span><br><span class="line">class myClass&lt;T&gt; &#123;</span><br><span class="line">    public value: T</span><br><span class="line">    constructor (value: T) &#123;</span><br><span class="line">        this.value = value</span><br><span class="line">    &#125;</span><br><span class="line">    processData (input: T):T &#123;</span><br><span class="line">        console.log(this.value)</span><br><span class="line">        <span class="built_in">return</span> input  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myClassA = new myClass&lt;string&gt;(<span class="string">&#x27;一年级&#x27;</span>)</span><br><span class="line">console.log(myClassA.processData(<span class="string">&#x27;二年级&#x27;</span>))</span><br><span class="line"></span><br><span class="line">const myClassB = new myClass&lt;number&gt;(1)</span><br><span class="line">console.log(myClassB.processData(2))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Typescript-指北&quot;&gt;&lt;a href=&quot;#Typescript-指北&quot; class=&quot;headerlink&quot; title=&quot;Typescript 指北&quot;&gt;&lt;/a&gt;Typescript 指北&lt;/h1&gt;&lt;h2 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot;</summary>
      
    
    
    
    <category term="Typescript" scheme="http://example.com/category/Typescript/"/>
    
    
    <category term="文档" scheme="http://example.com/tag/%E6%96%87%E6%A1%A3/"/>
    
    <category term="Typescript" scheme="http://example.com/tag/Typescript/"/>
    
    <category term="学习笔记" scheme="http://example.com/tag/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>朱雀森林公园</title>
    <link href="http://example.com/2025/07/04/ZhuquePark/"/>
    <id>http://example.com/2025/07/04/ZhuquePark/</id>
    <published>2025-07-04T11:50:17.000Z</published>
    <updated>2025-08-29T05:46:12.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><action>    <p> 朱雀森林公园位于西安市南郊，是西安市最大的城市公园，也是陕西省最大的城市公园。</p>      <p>        去前约了付神和仙总，刚好他俩项目不忙，仙总做了攻略，早上开车到大明宫接了付神，仙买了早点和补给，然后直奔朱雀森林公园。<br />        <b>爬上去肯定是不可能的~~~</b><br />        景区口买好往返索道，悠哉悠哉的坐索道上山，沿途风景不错，山上的空气也很清新，感觉整个人都轻松了很多。        由于天气原因冰晶顶未开放终究是没上去，甚是遗憾。不过朱雀森林公园的景色还是很美的，山清水秀，空气清新，适合休闲度假。    </p>    <b>期待下次登顶！</b></action></blockquote><p><img src="/2025/07/04/ZhuquePark/20250829122120_2.png" alt="朱雀森林公园" title="在路上"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_1.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_3.jpg" alt="标语" title="怪石"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_4.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_5.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_6.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_7.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_8.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_9.jpg" alt="标语" title="小松鼠"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_10.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_11.jpg" alt="标语" title="栈道"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_12.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_13.jpg" alt="标语" title="小松鼠"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_14.jpg" alt="标语" title="标语"><br><img src="/2025/07/04/ZhuquePark/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829122324_15.jpg" alt="标语" title="远山"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;action&gt;
    &lt;p&gt; 朱雀森林公园位于西安市南郊，是西安市最大的城市公园，也是陕西省最大的城市公园。&lt;/p&gt;  
    &lt;p&gt;
        去前约了付神和仙总，刚好他俩项目不忙，仙总做了攻略，早上开车到大明宫接了付神，仙买了早点和补给，</summary>
      
    
    
    
    <category term="Life" scheme="http://example.com/category/Life/"/>
    
    
    <category term="生活-游山玩水" scheme="http://example.com/tag/%E7%94%9F%E6%B4%BB-%E6%B8%B8%E5%B1%B1%E7%8E%A9%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>Git宝典</title>
    <link href="http://example.com/2025/02/21/Git/"/>
    <id>http://example.com/2025/02/21/Git/</id>
    <published>2025-02-21T07:23:49.000Z</published>
    <updated>2025-08-29T05:46:12.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote>关于我与Git的故事，要从很久以前我第一次接触它开始说起。<br />刚加入开发团队的我与队友相互协作开发任务，常常感觉自己像个菜鸟。每天满心热情投入工作，却被代码提交出现的各种状况搞得焦头烂额，每次代码提交都像是一场冒险，小心翼翼又满心欢喜地将自己辛苦编写的代码push 到 remoteRepository，却还是可能遭遇代码冲突的“陷阱”。有时pull code时却发现代码被莫名其妙冲掉，自己的成果瞬间“消失”......<br>经常出错的我，时间久了被道友称为“Git杀手”。<p>Git作为日常开发必备工具，是码农必须掌握的技能，它是团队协作的桥梁，是保障代码有序管理的关键。<br>逃避解决不了问题，只有掌握它，才能在开发这条路上走得更远更稳。别害怕！接下来，就让我们一起揭开Git神秘的面纱，从基础学起，一步步成为Git高手，摆脱被它“支配”的日子，在开发之路上披荆斩棘。愿我们一起成长为“代码提交小能手”。</p></blockquote>    <span id="more"></span><h3 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h3><p>Git是一个分布式版本控制系统，用于跟踪代码的更改和协作开发。它允许开发人员在一个远程仓库（remoteRepository）中共享代码，并跟踪代码的更改历史。Git使用快照的方式保存代码的更改，使得代码的回滚和分支管理变得简单和高效。</p><h3 id="Git与SVN的区别"><a href="#Git与SVN的区别" class="headerlink" title="Git与SVN的区别"></a>Git与SVN的区别</h3><p>Git和SVN都是版本控制系统，但它们在实现方式和功能上有一些区别：- Git是分布式版本控制系统，每个开发人员都可以在本地拥有一个完整的代码仓库，而SVN是集中式版本控制系统，所有代码都保存在中心服务器上。</p><h3 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库，并进入该目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> myproject</span><br><span class="line">$ <span class="built_in">cd</span> myproject</span><br><span class="line">$ git init </span><br><span class="line"><span class="comment">## 举例 </span></span><br><span class="line">$ git init myproject 这里做了一件事，就是在myproject根目录下创建一个.git子目录，用来保存版本信息。</span><br><span class="line">$ <span class="built_in">ls</span> .git</span><br><span class="line"></span><br><span class="line">branches/</span><br><span class="line">config</span><br><span class="line">description</span><br><span class="line">HEAD</span><br><span class="line">hooks/</span><br><span class="line">info/</span><br><span class="line">objects/</span><br><span class="line">refs/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆远程仓库，包括代码和历史记录</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/username/repo.git</span><br></pre></td></tr></table></figure><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息，会记录是谁提交的</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;youremail@domain.com&quot;</span></span><br></pre></td></tr></table></figure><h3 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加&#x2F;删除文件"></a>三、增加&#x2F;删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git add README.md</span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [<span class="built_in">dir</span>]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git add src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git <span class="built_in">rm</span> [file1] [file2] ...</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git <span class="built_in">rm</span> file1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached [file]</span><br><span class="line"><span class="comment">## 举例 </span></span><br><span class="line">$ git <span class="built_in">rm</span> --cached file1.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git <span class="built_in">mv</span> [file-original] [file-renamed]</span><br><span class="line"><span class="comment">## 举例 </span></span><br><span class="line">$ git <span class="built_in">mv</span> file1.txt file2.txt</span><br></pre></td></tr></table></figure><h3 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h3><blockquote>我们在暂存区保留本次变动的文件信息，修改完成就要把这些信息提交到历史，相当于生成了当前项目分支的一个快照（snapshot）。此时Git就可以将项目恢复到任意一个快照，快照在Git里面有一个专门名词，叫做 commit，生成快照又称为完成一次提交。</blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区（已暂存的可以反复多次修改提交）  </span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的所有文件到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git commit -m <span class="string">&quot;add file1.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的所有文件到仓库区</span></span><br><span class="line">$ git commit -a -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -am [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化 </span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">master</span><br><span class="line">dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"><span class="comment">## 举例 </span></span><br><span class="line">origin/master</span><br><span class="line">origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">master</span><br><span class="line">dev</span><br><span class="line">* origin/master</span><br><span class="line">  origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git branch dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git checkout -b dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git branch dev 3d6f9c9f5e8a3f6e6f6e6f6e6f6e6f6e6f6e6f6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git branch --track dev origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"><span class="comment">## 举例 </span></span><br><span class="line">$ git checkout dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git branch --set-upstream dev origin/dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"><span class="comment">## 举例 </span></span><br><span class="line">$ git merge dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git cherry-pick 3d6f9c9f5e8a3f6e6f6e6f6e6f6e6f6e6f6e6f6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git branch -d dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git push origin --delete dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支，本地保留</span></span><br><span class="line">$ git branch -dr [remote/branch]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git branch -dr origin/dev</span><br></pre></td></tr></table></figure><h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">v1.0</span><br><span class="line">v2.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git tag v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git tag v1.0 3d6f9c9f5e8a3f6e6f6e6f6e6f6e6f6e6f6e6f6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git tag -d v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git push origin :refs/tags/v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git show v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git push origin v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag到远程仓库</span></span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git push origin v1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br><span class="line"><span class="comment">## 举例 </span></span><br><span class="line">$ git checkout -b v1.0 v1.0</span><br></pre></td></tr></table></figure><h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前分支状态</span></span><br><span class="line">$ git status</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 1 commit.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   test.txt</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">commit 3d6f9c9f5e8a3f6e6f6e6f6e6f6e6f6e6f6e6f6</span><br><span class="line">Author: zhangsan &lt;zhangsan@example.com&gt;</span><br><span class="line">Date:   Mon Oct 12 17:00:00 2020 +0800</span><br><span class="line"></span><br><span class="line">    <span class="built_in">test</span> commit</span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其commit时间线图</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --graph --pretty=format:<span class="string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;</span> --<span class="built_in">date</span>=relative</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复工作区某个文件的指定版本</span></span><br><span class="line">$ git checkout [file]@&#123;v&#125;</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git checkout test.txt@&#123;1&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复工作区文件的指定版本</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"><span class="comment">## 举例</span></span><br><span class="line">$ git checkout 3d6f9c9f5e8a3f6e6f6e6f6e6f6e6f6e6f6e6f6 test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销暂存区的指定文件，然后恢复到工作区状态</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销暂存区的所有文件，然后恢复到工作区状态</span></span><br><span class="line">$ git reset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销某个commit的修改</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销上一次commit</span></span><br><span class="line">$ git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销上上一次commit</span></span><br><span class="line">$ git reset --hard HEAD^^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销到上一次commit，撤销的修改保存在工作区</span></span><br><span class="line">$ git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销到上上一次commit，撤销的修改保存在工作区</span></span><br><span class="line">$ git reset --soft HEAD^^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销到上一次commit，撤销的修改保存在暂存区</span></span><br><span class="line">$ git reset --mixed HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销到上上一次commit，撤销的修改保存在暂存区</span></span><br><span class="line">$ git reset --mixed HEAD^^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard  </span><br><span class="line"><span class="comment">## 注意：</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h3><h4 id="1-暂存区和工作区的区别（是‌Git版本控制中的两个核心概念‌）"><a href="#1-暂存区和工作区的区别（是‌Git版本控制中的两个核心概念‌）" class="headerlink" title="1. 暂存区和工作区的区别（是‌Git版本控制中的两个核心概念‌）"></a>1. 暂存区和工作区的区别（是‌Git版本控制中的两个核心概念‌）</h4><blockquote><action>‌工作区（Working Directory/Working Tree）‌：工作区是用户与代码直接交互的地方，即本地计算机上的项目文件夹。这是实际编辑文件、编写代码的区域。工作区中的文件可以是从版本库中检出的文件，也可以是新创建的文件。对文件的修改首先发生在工作区中。工作区的内容不会自动进入版本库，需要通过git add命令将更改添加到暂存区。工作区中的文件可能有未跟踪（Untracked）、已修改（Modified）等状态‌。<p>‌暂存区（Staging Area&#x2F;Index）‌：<br>暂存区是一个临时的存储区域，用于保存将要提交的更改。可以理解为一个缓冲区，可以选择性地将工作区中的某些或全部更改放入暂存区，随后再提交到版本库。<br>暂存区记录的是工作区中已被标记为准备提交的更改。通过git add命令将文件或改动从工作区添加到暂存区。暂存区的内容是提交时的依据，只有暂存区中的内容才会被git commit提交到版本库。文件状态示例为已暂存（Staged）‌。</p><p>简而言之，工作区是用户进行文件编辑和修改的区域，而暂存区则是用于临时存放这些修改，并准备将其提交到版本库的区域。通过git add命令。可以将工作区的修改添加到暂存区；通过git commit命令，则可以将暂存区的修改提交到版本库中‌。<br></action>  </p></blockquote><h4 id="2-git-reset-命令：在-Git-中用于将当前分支的-HEAD-指针移动到指定位置，并可以选择性地改变暂存区和工作区的内容。"><a href="#2-git-reset-命令：在-Git-中用于将当前分支的-HEAD-指针移动到指定位置，并可以选择性地改变暂存区和工作区的内容。" class="headerlink" title="2. git reset 命令：在 Git 中用于将当前分支的 HEAD 指针移动到指定位置，并可以选择性地改变暂存区和工作区的内容。"></a>2. git reset 命令：在 Git 中用于将当前分支的 HEAD 指针移动到指定位置，并可以选择性地改变暂存区和工作区的内容。</h4><blockquote><action>git reset 有三种模式：--hard、--soft 和 --mixed（后者是默认模式，如果不指定模式则使用 --mixed）。下面是这三种模式的区别以及举例说明：（1） git reset --hard‌作用‌：将当前分支的 HEAD 指针移动到指定位置，并强制将暂存区和工作区的内容更新为与新的 HEAD 指针指向的提交完全一致。这意味着所有未提交的更改都会被丢弃。举例说明‌：假设我们有以下提交历史：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">commit 1</span><br><span class="line">commit 2</span><br><span class="line">commit 3</span><br><span class="line">commit 4</span><br></pre></td></tr></table></figure>现在我们执行 `git reset --hard HEAD~2`，这将把 HEAD 指针移动到 commit 2，并强制将暂存区和工作区的内容更新为与 commit 2 一致。commit 3 和 commit 4 的更改将被丢弃。（2） git reset --soft‌作用‌：将当前分支的 HEAD 指针移动到指定位置，并将暂存区的内容更新为与新的 HEAD 指针指向的提交一致，但工作区的内容保持不变。这意味着所有未提交的更改将保留在工作区中。举例说明‌：假设我们有以下提交历史：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">commit 1</span><br><span class="line">commit 2</span><br><span class="line">commit 3</span><br><span class="line">commit 4</span><br></pre></td></tr></table></figure>现在我们执行 `git reset --soft HEAD~2`，这将把 HEAD 指针移动到 commit 2，并将暂存区的内容更新为与 commit 2 一致。commit 3 和 commit 4 的更改将保留在工作区中。（3） git reset --mixed‌作用‌：将当前分支的 HEAD 指针移动到指定位置，并将暂存区的内容更新为与新的 HEAD 指针指向的提交一致，但工作区的内容保持不变。这意味着所有未提交的更改将保留在工作区中，并且暂存区的内容将与新的 HEAD 指针指向的提交一致。举例说明‌：假设我们有以下提交历史：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">commit 1</span><br><span class="line">commit 2</span><br><span class="line">commit 3</span><br><span class="line">commit 4</span><br></pre></td></tr></table></figure>现在我们执行 `git reset --mixed HEAD~2`，这将把 HEAD 指针移动到 commit 2，并将暂存区的内容更新为与 commit 2 一致。commit 3 和 commit 4 的更改将保留在工作区中，并且暂存区的内容将与 commit 2 一致。<p>总结<br>‌–hard‌：重置 HEAD、暂存区和工作区。需特别小心，因为它会丢弃所有未提交的更改。<br>‌–soft‌：仅重置 HEAD，保留暂存区和工作区。<br>‌–mixed‌（默认）：重置 HEAD 和暂存区，保留工作区。<br></action></p></blockquote>本篇只是简单介绍了Git的常见指令和场景，实际开发时请一定明确自己的Git操作指令和意图，否则可能会丢失代码，请谨慎使用！避免出现覆水难收的灾难！！！<p><a href="https://learngitbranching.js.org/?locale=zh_CN">Git练习传送门</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
关于我与Git的故事，要从很久以前我第一次接触它开始说起。&lt;br /&gt;
刚加入开发团队的我与队友相互协作开发任务，常常感觉自己像个菜鸟。每天满心热情投入工作，却被代码提交出现的各种状况搞得焦头烂额，每次代码提交都像是一场冒险，小心翼翼又满心欢喜地将自己辛苦编写的代码push 到 remoteRepository，却还是可能遭遇代码冲突的“陷阱”。有时pull code时却发现代码被莫名其妙冲掉，自己的成果瞬间“消失”......&lt;br&gt;
经常出错的我，时间久了被道友称为“Git杀手”。

&lt;p&gt;Git作为日常开发必备工具，是码农必须掌握的技能，它是团队协作的桥梁，是保障代码有序管理的关键。&lt;br&gt;逃避解决不了问题，只有掌握它，才能在开发这条路上走得更远更稳。别害怕！接下来，就让我们一起揭开Git神秘的面纱，从基础学起，一步步成为Git高手，摆脱被它“支配”的日子，在开发之路上披荆斩棘。愿我们一起成长为“代码提交小能手”。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="工具" scheme="http://example.com/category/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="文档" scheme="http://example.com/tag/%E6%96%87%E6%A1%A3/"/>
    
    <category term="Git" scheme="http://example.com/tag/Git/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler 入门使用教程</title>
    <link href="http://example.com/2025/02/20/Fiddler/"/>
    <id>http://example.com/2025/02/20/Fiddler/</id>
    <published>2025-02-20T04:13:50.000Z</published>
    <updated>2025-08-29T05:46:12.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Fiddler简介"><a href="#Fiddler简介" class="headerlink" title="Fiddler简介"></a>Fiddler简介</h2><p>Fiddler是一个强大的HTTP抓包工具，它能够捕获并查看所有通过计算机的HTTP和HTTPS流量。Fiddler可以用来调试web应用程序，查看网络请求和响应，分析网络性能，以及进行安全测试。<br>实现原理是以代理服务器的方式工作，代理就是在客户端和服务器之间设置一道关卡，客户端先将请求数据发送出去后，代理服务器会将数据包进行拦截，代理服务器再冒充客户端发送数据到服务器；同理，服务器将响应数据返回，代理服务器也会将数据拦截，再返回给客户端。（浏览器 &lt; -&gt; Fiddler &lt; -&gt; 服务器）</p><p><img src="/2025/02/20/Fiddler/1338662142991310848.png" alt="img"></p><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://[www.telerik.com/fiddler](https://soft.aijiaer11.cn/soft/4173.html?bd_vid=7754815383310687671)">https:&#x2F;&#x2F;<a href="https://soft.aijiaer11.cn/soft/4173.html?bd_vid=7754815383310687671">www.telerik.com/fiddler</a></a></p><h2 id="Fiddler的使用"><a href="#Fiddler的使用" class="headerlink" title="Fiddler的使用"></a>Fiddler的使用</h2><h3 id="一、Fiddler中的设置："><a href="#一、Fiddler中的设置：" class="headerlink" title="一、Fiddler中的设置："></a>一、Fiddler中的设置：</h3><p><img src="/2025/02/20/Fiddler/1340125925504884736.png" alt="img1"><br><img src="/2025/02/20/Fiddler/1340134901340610560.png" alt="img2">!<br><img src="/2025/02/20/Fiddler/1340136688831340544.png" alt="img3"><br><img src="/2025/02/20/Fiddler/1340138878295777280.png" alt="img4"><br><img src="/2025/02/20/Fiddler/1340140536794882048.png" alt="img5"></p><h3 id="二、移动设备上的设置："><a href="#二、移动设备上的设置：" class="headerlink" title="二、移动设备上的设置："></a>二、移动设备上的设置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">移动设备必须和电脑（开热点）连接同一个网络</span><br><span class="line">必须在同一局域网内，设置移动设备代理转发，</span><br><span class="line">将移动设备上的数据流转发到我们的fiddler的工具上，</span><br><span class="line">由fiddler工具访问网络从而获取到我们想要的内容。</span><br><span class="line">1.手机安装证书，在浏览器中输入地址和端口号，如：http://192.168.1.101:8888，</span><br><span class="line">2.在页面中点击“FilddlerRoot certificate”下载证书，下载后点击安装证书。</span><br><span class="line">3.安卓凭据用途选择 “VPN和应用”</span><br><span class="line">4.连上电脑的热点之后，进行手机上的设置：</span><br><span class="line">（1) HTTP代理：配置代理--&gt;手动</span><br><span class="line">（2）服务器：电脑的IP地址--&gt;端口：8888</span><br></pre></td></tr></table></figure><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><p><img src="/2025/02/20/Fiddler/1340202336890560512.png" alt="img6"><br><img src="/2025/02/20/Fiddler/1340202938286645248.png" alt="img6"><br><img src="/2025/02/20/Fiddler/1340205645454024704.png" alt="img6"><br><img src="/2025/02/20/Fiddler/1340205987025559552.png" alt="img6"></p><p>其他需要使用过滤规则，性能测试，配置参数等具体请自行百度，本篇只是入门篇。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Fiddler简介&quot;&gt;&lt;a href=&quot;#Fiddler简介&quot; class=&quot;headerlink&quot; title=&quot;Fiddler简介&quot;&gt;&lt;/a&gt;Fiddler简介&lt;/h2&gt;&lt;p&gt;Fiddler是一个强大的HTTP抓包工具，它能够捕获并查看所有通过计算机的HTTP</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/category/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Fiddler" scheme="http://example.com/tag/Fiddler/"/>
    
    <category term="文档" scheme="http://example.com/tag/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>PonitLight</title>
    <link href="http://example.com/2025/02/13/PonitLight/"/>
    <id>http://example.com/2025/02/13/PonitLight/</id>
    <published>2025-02-13T02:54:31.000Z</published>
    <updated>2025-02-13T05:12:21.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点光源"><a href="#点光源" class="headerlink" title="点光源"></a>点光源</h2><img src="/2025/02/13/PonitLight/1.jpg" class="" title="点光源"><ol><li>灯光与阴影的关系与设置</li><li>平行光阴影属性与阴影相机原理</li><li>聚光灯各种属性与应用</li><li>点光源属性与应用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted, onBeforeUnmount &#125; from <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">import &#123; useRouter &#125; from <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">import * as THREE from <span class="string">&#x27;three&#x27;</span></span><br><span class="line">import &#123; GUI &#125; from <span class="string">&#x27;three/examples/jsm/libs/lil-gui.module.min.js&#x27;</span></span><br><span class="line">import &#123; OrbitControls &#125; from <span class="string">&#x27;three/examples/jsm/controls/OrbitControls.js&#x27;</span></span><br><span class="line">import gsap from <span class="string">&#x27;gsap&#x27;</span></span><br><span class="line"></span><br><span class="line">const router = useRouter()</span><br><span class="line">const width = window.innerWidth, height = window.innerHeight;</span><br><span class="line">const threeContainer = ref(null);</span><br><span class="line">const guiContainer = ref(null);</span><br><span class="line">// 创建场景</span><br><span class="line">const scene = new THREE.Scene();</span><br><span class="line">// WebGL渲染器</span><br><span class="line">const renderer = new THREE.WebGLRenderer();</span><br><span class="line">// 创建相机</span><br><span class="line">const camera = new THREE.PerspectiveCamera( 75, width / height, 0.1, 1000 );</span><br><span class="line">// 添加轨道控制器</span><br><span class="line">const controls = new OrbitControls(camera, renderer.domElement)</span><br><span class="line">// 坐标辅助</span><br><span class="line">const axesHelper = new THREE.AxesHelper( 5 );</span><br><span class="line">const smallBall = new THREE.Mesh(</span><br><span class="line">  new THREE.SphereGeometry( 0.1, 20, 20 ), </span><br><span class="line">  new THREE.MeshBasicMaterial(&#123; color: 0xff0000 &#125;)</span><br><span class="line">);</span><br><span class="line"> // 创建时钟</span><br><span class="line">const clock = new THREE.Clock();</span><br><span class="line">// 创建GUI</span><br><span class="line">const gui = new GUI(&#123;</span><br><span class="line">    width: 400, // 设置gui的宽度</span><br><span class="line">    closeOnTop: <span class="literal">true</span>, // 设置gui是否在顶部关闭</span><br><span class="line">    autoPlace: <span class="literal">true</span>, // 设置gui是否自动放置在页面中</span><br><span class="line">    title: <span class="string">&#x27;Controls&#x27;</span>, // 设置gui的标题</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  init()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  gui.destroy(); // 销毁GUI实例</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const init = () =&gt; &#123;</span><br><span class="line">  camera.position.set( <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span> );</span><br><span class="line">  scene.add( camera );</span><br><span class="line">  // camera.lookAt( <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span> ); // 默认原点</span><br><span class="line">  const sphereGeometry = new THREE.SphereGeometry(<span class="number">1</span>, <span class="number">64</span>, <span class="number">64</span>);</span><br><span class="line">  const material = new THREE.MeshStandardMaterial();</span><br><span class="line">  const sphere = new THREE.Mesh( sphereGeometry, material );</span><br><span class="line">  sphere.castShadow = true; // 设置物体投射阴影</span><br><span class="line">  scene.add( sphere );</span><br><span class="line">  // 创建平面</span><br><span class="line">  const palneGeometry = new THREE.PlaneGeometry(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">  const plane = new THREE.Mesh(palneGeometry, material);</span><br><span class="line">  plane.position.set(<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  plane.rotation.x = -Math.PI / <span class="number">2</span>;</span><br><span class="line">  plane.receiveShadow = true; // 设置物体接收阴影</span><br><span class="line">  scene.add(plane);</span><br><span class="line">  /* ---- 光源 ---- */</span><br><span class="line">  // 环境光</span><br><span class="line">  const light = new THREE.AmbientLight( <span class="number">0</span>xffffff, <span class="number">0.75</span> );</span><br><span class="line">  scene.add(light);</span><br><span class="line"></span><br><span class="line">  smallBall.position.set( <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span> );</span><br><span class="line">  // 点光源</span><br><span class="line">  const pointLight = new THREE.PointLight( <span class="number">0</span>xff0000, <span class="number">0.75</span> )</span><br><span class="line">  // pointLight.position.set( <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span> );</span><br><span class="line">  pointLight.castShadow = true; // 设置光照投射阴影 </span><br><span class="line">  pointLight.target = smallBall</span><br><span class="line">  pointLight.distance = <span class="number">0</span>;</span><br><span class="line">  pointLight.decay = <span class="number">0</span>;</span><br><span class="line">  smallBall.add( pointLight );</span><br><span class="line">  scene.add( smallBall );</span><br><span class="line">  gui.add( pointLight.position, &#x27;x&#x27; ).min(-<span class="number">5</span>).max(<span class="number">5</span>).step(<span class="number">0.1</span>);</span><br><span class="line">  gui.add( pointLight, &#x27;distance&#x27;).min(<span class="number">0</span>).max(<span class="number">1</span>).step(<span class="number">0.01</span>);</span><br><span class="line">  gui.add( pointLight, &#x27;decay&#x27; ).min(<span class="number">0</span>).max(<span class="number">5</span>).step(<span class="number">0.01</span>);</span><br><span class="line">  // 将坐标轴添加到场景中</span><br><span class="line">  scene.add( axesHelper );  </span><br><span class="line">  </span><br><span class="line">  renderer.shadowMap.enabled = true; // 开启场景中的阴影贴图</span><br><span class="line">  renderer.physicallyCorrectLights = true; // 开启物理正确的光照</span><br><span class="line">  renderer.shadowMap.resolution = <span class="number">1024</span>; // 设置阴影贴图的分辨率</span><br><span class="line">  renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 设置阴影贴图的类型</span><br><span class="line">  camera.aspect = width / height; // 更新相机宽高比</span><br><span class="line">  camera.updateProjectionMatrix(); // 更新相机投影矩阵</span><br><span class="line">  controls.enableDamping = true; // 启用阻尼（惯性）</span><br><span class="line">  renderer.setAnimationLoop( animate );</span><br><span class="line">  animate();</span><br><span class="line">  // 将渲染器添加到DOM中</span><br><span class="line">  threeContainer.value.appendChild( renderer.domElement );</span><br><span class="line">  // 将GUI添加到页面中</span><br><span class="line">  guiContainer.value.appendChild( gui.domElement );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const animate = () =&gt; &#123;</span><br><span class="line">  const time = clock.getElapsedTime();</span><br><span class="line">  smallBall.position.x = Math.sin(time) * <span class="number">2</span>;</span><br><span class="line">  smallBall.position.z = Math.cos(time) * <span class="number">2</span>;</span><br><span class="line">  controls.update(); // 更新轨道控制器</span><br><span class="line">  renderer.setSize( width, height );</span><br><span class="line">  renderer.render( scene, camera ); // 将场景和相机渲染到屏幕上</span><br><span class="line">  // requestAnimationFrame(animate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const back = () =&gt; &#123;</span><br><span class="line">  router.go(-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;back-btn&quot;  @click=&quot;back&quot;&gt;返回&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div ref=&quot;threeContainer&quot; class=&quot;threeContainer&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div ref=&quot;guiContainer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;点光源&quot;&gt;&lt;a href=&quot;#点光源&quot; class=&quot;headerlink&quot; title=&quot;点光源&quot;&gt;&lt;/a&gt;点光源&lt;/h2&gt;&lt;img src=&quot;/2025/02/13/PonitLight/1.jpg&quot; class=&quot;&quot; title=&quot;点光源&quot;&gt;

&lt;ol&gt;
&lt;</summary>
      
    
    
    
    <category term="WebGL" scheme="http://example.com/category/WebGL/"/>
    
    
    <category term="Three.js" scheme="http://example.com/tag/Three-js/"/>
    
    <category term="pointLight" scheme="http://example.com/tag/pointLight/"/>
    
  </entry>
  
  <entry>
    <title>Dream car</title>
    <link href="http://example.com/2025/02/10/Dream-car/"/>
    <id>http://example.com/2025/02/10/Dream-car/</id>
    <published>2025-02-10T13:50:17.000Z</published>
    <updated>2025-02-13T05:12:21.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dream-car"><a href="#Dream-car" class="headerlink" title="Dream car"></a>Dream car</h1><h3 id="xiaomi-SU7"><a href="#xiaomi-SU7" class="headerlink" title="xiaomi SU7"></a>xiaomi SU7</h3><p>一个简单的3D 汽车模型展示场景与原理；主要是模型的加载，选配材质和物理材质的设置，以及应用灯光实现的效果。</p><span id="more"></span><p><img src="https://s1.xiaomiev.com/activity-outer-assets/0328/images/su7/su7_1_20241226.jpg" alt="xiaomi SU7" title="SU7"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted, onBeforeUnmount &#125; from <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line">import &#123; useRouter &#125; from <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">import * as THREE from <span class="string">&#x27;three&#x27;</span></span><br><span class="line">import &#123; GUI &#125; from <span class="string">&#x27;three/examples/jsm/libs/lil-gui.module.min.js&#x27;</span></span><br><span class="line">import &#123; OrbitControls &#125; from <span class="string">&#x27;three/examples/jsm/controls/OrbitControls.js&#x27;</span></span><br><span class="line">import &#123; GLTFLoader &#125; from <span class="string">&#x27;three/examples/jsm/loaders/GLTFLoader.js&#x27;</span></span><br><span class="line">import &#123; DRACOLoader &#125; from <span class="string">&#x27;three/examples/jsm/loaders/DRACOLoader.js&#x27;</span></span><br><span class="line">import * as GeometryCompressionUtils from <span class="string">&#x27;three/addons/utils/GeometryCompressionUtils.js&#x27;</span>;</span><br><span class="line">import gsap from <span class="string">&#x27;gsap&#x27;</span></span><br><span class="line">import JSZip from <span class="string">&#x27;jszip&#x27;</span></span><br><span class="line">import JSZipUtils from <span class="string">&#x27;jszip-utils&#x27;</span></span><br><span class="line"></span><br><span class="line">const router = useRouter()</span><br><span class="line">const width = window.innerWidth, height = window.innerHeight;</span><br><span class="line">const threeContainer = ref(null);</span><br><span class="line">const guiContainer = ref(null);</span><br><span class="line"></span><br><span class="line">// 车辆外观</span><br><span class="line"><span class="built_in">let</span> wheelsCar, carBody, frontCar, hoodCar, backCar, glassCar;</span><br><span class="line">const bodyMaterial = new THREE.MeshPhysicalMaterial(&#123; </span><br><span class="line">  color: 0xff00ff, </span><br><span class="line">  roughness: 0.5, // 粗糙度</span><br><span class="line">  metalness: 1, // 金属度</span><br><span class="line">  clearcoat: 1, </span><br><span class="line">  clearcoatRoughness: 0 // 清漆</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const wheelsCarMaterial = new THREE.MeshPhysicalMaterial(&#123;</span><br><span class="line">  color: 0x000000, </span><br><span class="line">  roughness: 0.01, // 粗糙度</span><br><span class="line">  metalness: 0.1, // 金属度</span><br><span class="line">  transmission: 1</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const glassCarMaterial = new THREE.MeshPhysicalMaterial(&#123; </span><br><span class="line">  color: 0xffffff, </span><br><span class="line">  transmission: 1,</span><br><span class="line">  roughness: 0, // 粗糙度</span><br><span class="line">  metalness: 0, // 金属度</span><br><span class="line">  transparent: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 创建场景</span><br><span class="line">const scene = new THREE.Scene();</span><br><span class="line"></span><br><span class="line">// init WebGL渲染器</span><br><span class="line">const renderer = new THREE.WebGLRenderer(&#123;</span><br><span class="line">  antialias: <span class="literal">true</span>, // 抗锯齿</span><br><span class="line">&#125;);</span><br><span class="line">renderer.setSize( width, height );</span><br><span class="line"></span><br><span class="line">// 设置色调映射</span><br><span class="line">// renderer.toneMapping = THREE.ACESFilmicToneMapping;</span><br><span class="line">// renderer.toneMappingExposure = 1; // 色调映射曝光</span><br><span class="line">// renderer.outputEncoding = THREE.sRGBEncoding;</span><br><span class="line"></span><br><span class="line">// init 相机</span><br><span class="line">const camera = new THREE.PerspectiveCamera( 75, width / height, 0.1, 1000 );</span><br><span class="line">camera.position.set( 0, 2, 6 );</span><br><span class="line">camera.updateProjectionMatrix(); // 更新相机投影矩阵</span><br><span class="line"></span><br><span class="line">// init 轨道控制器</span><br><span class="line">const controls = new OrbitControls(camera, renderer.domElement)</span><br><span class="line">controls.enableDamping = <span class="literal">true</span>; // 启用阻尼（惯性）</span><br><span class="line"></span><br><span class="line">// 坐标辅助</span><br><span class="line">// const axesHelper = new THREE.AxesHelper( 5 );</span><br><span class="line">// scene.add(axesHelper);</span><br><span class="line">// init 加载器gltf</span><br><span class="line">const gltfLoader = new GLTFLoader();</span><br><span class="line">// init 加载器draco</span><br><span class="line">const dracoLoader = new DRACOLoader();</span><br><span class="line">gltfLoader.setDRACOLoader(dracoLoader)</span><br><span class="line">dracoLoader.setDecoderPath(<span class="string">&#x27;/draco/gltf/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gltfLoader.load(<span class="string">&#x27;/su8-pipeline.glb&#x27;</span>, (gltf) =&gt; &#123;</span><br><span class="line">  gltf.scene.traverse(<span class="keyword">function</span> (child) &#123;</span><br><span class="line">    const dreamCar = gltf.scene;</span><br><span class="line">    dreamCar.traverse( child =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> ( child.isMesh ) &#123;</span><br><span class="line">        // console.log( child.name )</span><br><span class="line">        // <span class="keyword">if</span> ( child.name !== <span class="string">&#x27;Object_45&#x27;</span> ) &#123; // 车身</span><br><span class="line">        //   child.visible = <span class="literal">false</span>;</span><br><span class="line">        // &#125;</span><br><span class="line">      </span><br><span class="line">        // 车轮</span><br><span class="line">        // <span class="keyword">if</span> ( child.name === <span class="string">&#x27;Object_56&#x27;</span> ) &#123;</span><br><span class="line">        //   wheelsCar = child;</span><br><span class="line">        //   wheelsCar.material = wheelsCarMaterial;</span><br><span class="line">        // &#125;</span><br><span class="line"></span><br><span class="line">        // 玻璃</span><br><span class="line">        <span class="keyword">if</span> ( child.name === <span class="string">&#x27;Object_21&#x27;</span></span><br><span class="line">          || child.name === <span class="string">&#x27;Object_40&#x27;</span> </span><br><span class="line">          || child.name === <span class="string">&#x27;Object_49&#x27;</span></span><br><span class="line">          || child.name === <span class="string">&#x27;Object_36&#x27;</span>) &#123;</span><br><span class="line">          glassCar = child;</span><br><span class="line">          glassCar.material = glassCarMaterial;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 车身</span><br><span class="line">        <span class="keyword">if</span> ( child.name === <span class="string">&#x27;Object_18&#x27;</span></span><br><span class="line">          || child.name === <span class="string">&#x27;Object_32&#x27;</span> </span><br><span class="line">          || child.name === <span class="string">&#x27;Object_39&#x27;</span></span><br><span class="line">          || child.name === <span class="string">&#x27;Object_31&#x27;</span></span><br><span class="line">          || child.name === <span class="string">&#x27;Object_52&#x27;</span></span><br><span class="line">          || child.name === <span class="string">&#x27;Object_45&#x27;</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          carBody = child;</span><br><span class="line">          carBody.material = bodyMaterial;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Object_21:前后档玻璃 Object_45: 主驾门 Object_36：主驾车窗玻璃 Object_39：主驾后门 Object_40：主驾后门玻璃</span><br><span class="line">        // Object_32: 副驾门 Object_49：副驾门玻璃 Object_52：副驾后门 Object_53：副驾后门玻璃 Object_52：后挡风玻璃</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ( child.name === <span class="string">&#x27;Object_56&#x27;</span> ) &#123;</span><br><span class="line">          wheelsCar = child;</span><br><span class="line">        &#125;</span><br><span class="line">        // <span class="keyword">if</span> ( child.name === <span class="string">&#x27;Object_19&#x27;</span> ) &#123;</span><br><span class="line">        //   frontCar = child;</span><br><span class="line">        // &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    scene.add(dreamCar);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">// const zipFile = await fetch(<span class="string">&#x27;/su7.zip&#x27;</span>).<span class="keyword">then</span>(response =&gt; response.arrayBuffer()); // 获取zip文件的二进制数据</span><br><span class="line">// const new_zip = new JSZip(); // 实例化jszip</span><br><span class="line">// JSZipUtils.getBinaryContent(<span class="string">&quot;/su7.zip&quot;</span>, <span class="keyword">function</span> (err, data) &#123;</span><br><span class="line">//     <span class="keyword">if</span> (err) &#123;</span><br><span class="line">//       throw err; // or handle err</span><br><span class="line">//     &#125;</span><br><span class="line"></span><br><span class="line">//     new_zip.loadAsync(data).<span class="keyword">then</span>(<span class="keyword">function</span> (res) &#123; </span><br><span class="line">//       <span class="built_in">let</span> fileList = res.files;</span><br><span class="line">//       <span class="keyword">for</span> (<span class="built_in">let</span> key <span class="keyword">in</span> fileList) &#123;</span><br><span class="line">//         console.log(key)</span><br><span class="line">//         new_zip</span><br><span class="line">//         .file(key)</span><br><span class="line">//         .async(<span class="string">&quot;arraybuffer&quot;</span>)</span><br><span class="line">//         .<span class="keyword">then</span>((content) =&gt; &#123;</span><br><span class="line">//           // Blob构造文件地址，通过url加载模型</span><br><span class="line">//           let blob = new Blob([content]);</span><br><span class="line">//           let modelUrl = URL.createObjectURL(blob);</span><br><span class="line">//           console.log(modelUrl);</span><br><span class="line">//           gltfLoader.load(modelUrl, (gltf) =&gt; &#123;</span><br><span class="line">//             gltf.scene.traverse(function (child) &#123;</span><br><span class="line">//               const dreamCar = gltf.scene;</span><br><span class="line">//               dreamCar.traverse( child =&gt; &#123;</span><br><span class="line">//                 if ( child.isMesh ) &#123;</span><br><span class="line">//                   console.log( child.name )</span><br><span class="line">//                   // if ( child.name !== &#x27;Object_45&#x27; ) &#123; // 车身</span><br><span class="line">//                   //   child.visible = false;</span><br><span class="line">//                   // &#125;</span><br><span class="line">                </span><br><span class="line">//                   // 车轮</span><br><span class="line">//                   if ( child.name === &#x27;Object_56&#x27; ) &#123;</span><br><span class="line">//                     wheelsCar = child;</span><br><span class="line">//                     wheelsCar.material = wheelsCarMaterial;</span><br><span class="line">//                   &#125;</span><br><span class="line"></span><br><span class="line">//                   // 玻璃</span><br><span class="line">//                   if ( child.name === &#x27;Object_21&#x27;</span><br><span class="line">//                     || child.name === &#x27;Object_40&#x27; </span><br><span class="line">//                     || child.name === &#x27;Object_49&#x27;</span><br><span class="line">//                     || child.name === &#x27;Object_36&#x27;) &#123;</span><br><span class="line">//                     glassCar = child;</span><br><span class="line">//                     glassCar.material = glassCarMaterial;</span><br><span class="line">//                   &#125;</span><br><span class="line"></span><br><span class="line">//                   // 车身</span><br><span class="line">//                   if ( child.name === &#x27;Object_18&#x27;</span><br><span class="line">//                     || child.name === &#x27;Object_32&#x27; </span><br><span class="line">//                     || child.name === &#x27;Object_39&#x27;</span><br><span class="line">//                     || child.name === &#x27;Object_31&#x27;</span><br><span class="line">//                     || child.name === &#x27;Object_52&#x27;</span><br><span class="line">//                     || child.name === &#x27;Object_45&#x27;</span><br><span class="line">//                   ) &#123;</span><br><span class="line">//                     carBody = child;</span><br><span class="line">//                     carBody.material = bodyMaterial;</span><br><span class="line">//                   &#125;</span><br><span class="line"></span><br><span class="line">//                   // Object_21:前后档玻璃 Object_45: 主驾门 Object_36：主驾车窗玻璃 Object_39：主驾后门 Object_40：主驾后门玻璃</span><br><span class="line">//                   // Object_32: 副驾门 Object_49：副驾门玻璃 Object_52：副驾后门 Object_53：副驾后门玻璃 Object_52：后挡风玻璃</span><br><span class="line">                  </span><br><span class="line">//                   if ( child.name === &#x27;Object_56&#x27; ) &#123;</span><br><span class="line">//                     wheelsCar = child;</span><br><span class="line">//                   &#125;</span><br><span class="line">//                   // if ( child.name === &#x27;Object_19&#x27; ) &#123;</span><br><span class="line">//                   //   frontCar = child;</span><br><span class="line">//                   // &#125;</span><br><span class="line">//                 &#125;</span><br><span class="line">//               &#125;)</span><br><span class="line">//               scene.add(dreamCar);</span><br><span class="line">//             &#125;);</span><br><span class="line">//           &#125;);</span><br><span class="line">//         &#125;);</span><br><span class="line">//       &#125;</span><br><span class="line">//     &#125;)</span><br><span class="line">//   &#125;)</span><br><span class="line"></span><br><span class="line">// 添加光源 前、后、左、右、顶</span><br><span class="line">const light1 = new THREE.DirectionalLight( <span class="number">0</span>xffffff, <span class="number">1</span> );</span><br><span class="line">light1.position.set( <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span> );</span><br><span class="line">scene.add( light1 );</span><br><span class="line">const light2 = new THREE.DirectionalLight( <span class="number">0</span>xffffff, <span class="number">1</span> );</span><br><span class="line">light2.position.set( <span class="number">0</span>, <span class="number">0</span>, -<span class="number">10</span> );</span><br><span class="line">scene.add( light2 );</span><br><span class="line">const light3 = new THREE.DirectionalLight( <span class="number">0</span>xffffff, <span class="number">1</span> );</span><br><span class="line">light3.position.set( <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span> );</span><br><span class="line">scene.add( light3 );</span><br><span class="line">const light4 = new THREE.DirectionalLight( <span class="number">0</span>xffffff, <span class="number">1</span> );</span><br><span class="line">light4.position.set( <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span> );</span><br><span class="line">scene.add( light4 );</span><br><span class="line">const light5 = new THREE.DirectionalLight( <span class="number">0</span>xffffff, <span class="number">1</span> );</span><br><span class="line">light5.position.set( -<span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span> );</span><br><span class="line">scene.add( light5 );</span><br><span class="line">const light6 = new THREE.DirectionalLight( <span class="number">0</span>xffffff, <span class="number">1</span> );</span><br><span class="line">light6.position.set( <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span> );</span><br><span class="line">scene.add( light6 );</span><br><span class="line"></span><br><span class="line">const render = () =&gt; &#123;</span><br><span class="line">  controls.update();</span><br><span class="line">  renderer.render( scene, camera );</span><br><span class="line">  requestAnimationFrame( render );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">renderer.setClearColor(&#x27;#<span class="number">000</span>&#x27;);</span><br><span class="line">scene.background = new THREE.Color(&#x27;#ccc&#x27;);</span><br><span class="line">scene.environment = new THREE.Color(&#x27;#ccc&#x27;);</span><br><span class="line"></span><br><span class="line">// 添加网格地面</span><br><span class="line">const gridHelper = new THREE.GridHelper( <span class="number">10</span>, <span class="number">10</span> );</span><br><span class="line">gridHelper.material.opacity = <span class="number">0.5</span>;</span><br><span class="line">gridHelper.material.transparent = true;</span><br><span class="line">scene.add( gridHelper );</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  render();</span><br><span class="line">  document.body.appendChild( renderer.domElement ); // 将渲染器添加到DOM中</span><br><span class="line">  // init renderer`s backgroundColor</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onBeforeUnmount(() =&gt; &#123;</span><br><span class="line">  memoryClean();</span><br><span class="line">  // gui.destroy(); // 销毁GUI实例</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const memoryClean = () =&gt;&#123;</span><br><span class="line">    const meshes = [];</span><br><span class="line">    scene.traverse(function (object) &#123;</span><br><span class="line">        object.isMesh &amp;&amp; meshes.push(object);</span><br><span class="line">    &#125;);</span><br><span class="line">    for (let i = <span class="number">0</span>; i &lt; meshes.length; i++) &#123;</span><br><span class="line">        const mesh = meshes[i];</span><br><span class="line">        mesh.material.dispose();</span><br><span class="line">        mesh.geometry.dispose();</span><br><span class="line">        scene.remove(mesh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const back = () =&gt; &#123;</span><br><span class="line">  router.go(-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;btn-group&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;back-btn&quot;  @click=&quot;back&quot;&gt;返回&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;div ref=&quot;threeContainer&quot; class=&quot;threeContainer&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div ref=&quot;guiContainer&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h3><p><img src="/image/website/xiaomiSU7.png" alt="xiaomi SU7"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Dream-car&quot;&gt;&lt;a href=&quot;#Dream-car&quot; class=&quot;headerlink&quot; title=&quot;Dream car&quot;&gt;&lt;/a&gt;Dream car&lt;/h1&gt;&lt;h3 id=&quot;xiaomi-SU7&quot;&gt;&lt;a href=&quot;#xiaomi-SU7&quot; class=&quot;headerlink&quot; title=&quot;xiaomi SU7&quot;&gt;&lt;/a&gt;xiaomi SU7&lt;/h3&gt;&lt;p&gt;一个简单的3D 汽车模型展示场景与原理；主要是模型的加载，选配材质和物理材质的设置，以及应用灯光实现的效果。&lt;/p&gt;</summary>
    
    
    
    <category term="WebGL" scheme="http://example.com/category/WebGL/"/>
    
    
    <category term="Three.js" scheme="http://example.com/tag/Three-js/"/>
    
    <category term="xiaomi su7" scheme="http://example.com/tag/xiaomi-su7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="http://example.com/2025/02/10/Hexo/"/>
    <id>http://example.com/2025/02/10/Hexo/</id>
    <published>2025-02-10T07:50:17.000Z</published>
    <updated>2025-02-13T05:12:21.956Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="Hexo" scheme="http://example.com/category/Hexo/"/>
    
    
    <category term="文档" scheme="http://example.com/tag/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>真石漆施工方案</title>
    <link href="http://example.com/2022/09/13/Zhenshiqi/"/>
    <id>http://example.com/2022/09/13/Zhenshiqi/</id>
    <published>2022-09-13T04:13:50.000Z</published>
    <updated>2025-09-24T19:40:03.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="真石漆施工方案"><a href="#真石漆施工方案" class="headerlink" title="真石漆施工方案"></a>真石漆施工方案</h1><div id="doc-hgb52z05m"      data-doc-viewer="true"     data-file-url="真石漆施工方案.docx"     data-file-type="安紫龙文档"     data-width="100%"     data-height="600px"     data-title="文档预览"></div><h2 id="一、施工流程"><a href="#一、施工流程" class="headerlink" title="一、施工流程"></a>一、施工流程</h2><ol><li><p><strong>墙面处理</strong></p><ul><li>外墙面要求平整、干燥，无浮尘、油脂及沥青等油污</li><li>墙基PH值&lt;10，含水率&lt;10%</li><li>对整体墙面进行检查，是否有空鼓现象</li><li>对多孔质、粗糙表面进行修补打磨，确保墙面整体效果</li></ul></li><li><p><strong>墙面批腻子施工</strong></p><ul><li>用外墙专用腻子对墙面进行批刮</li><li>首先对局部不平整的墙面进行施工</li><li>后对整体墙面进行批刮，并用砂纸打磨</li><li>直至墙面平整为止</li></ul></li><li><p><strong>抗碱封闭底漆施工</strong></p><ul><li>待上述工作完成后，采用抗碱封闭底漆进行施工</li><li>最好先滚涂，再用排刷刷一遍，防止漏刷</li><li>增强墙体与面涂的粘合强度及防水功能</li></ul></li><li><p><strong>主涂层真石漆施工</strong></p><ul><li>待底漆干燥后（25℃&#x2F;12小时）</li><li>采用成品真石漆进行喷涂施工</li><li>施工采用专用喷枪进行喷涂施工</li><li>调节枪头孔径及气流，喷出所需效果即可</li></ul></li><li><p><strong>勾缝修整施工</strong></p><ul><li>在施工结束后，对不良的墙面及时修整</li><li>对分割线进行勾缝，勾缝要求匀直</li><li>确保墙面整体美观</li></ul></li><li><p><strong>透明保护漆施工</strong></p><ul><li>待上述工作全部结束后</li><li>采用TER-D-7020金属漆专用罩面漆进行施工</li><li>可用辊筒在金属漆表面均匀的涂布即可</li><li>提高整体墙面的抗污自洁能力及抗水功能，增强整体效果</li></ul></li></ol><h2 id="二、施工准备"><a href="#二、施工准备" class="headerlink" title="二、施工准备"></a>二、施工准备</h2><ol><li><p><strong>主要的材料</strong></p><ul><li>封底漆</li><li>水泥</li><li>真石漆</li><li>胶带</li><li>罩面漆</li><li>胶</li><li>稀释剂等</li></ul></li><li><p><strong>主要机具</strong></p><ul><li>空压机</li><li>喷枪</li><li>手提式搅拌器</li><li>简便水平器</li><li>刷子</li><li>开刀等</li></ul></li></ol><h2 id="三、作业条件"><a href="#三、作业条件" class="headerlink" title="三、作业条件"></a>三、作业条件</h2><ol><li><p>门窗按设计要求安装好，四周的缝隙已封堵处理好。</p></li><li><p><strong>墙面基层的要求</strong></p><ul><li>墙面的湿度&lt;10％，外墙面平整，无油污、无裂缝、无砂眼，墙角顺直无缺陷。完成了雨水管卡等外墙面设施的安装。</li><li>外墙双排钢管脚手架搭设完成并通过验收，要符合国家安全规范要求，外架排木距墙面300~350cm。</li><li>所有的成品门窗要提前保护。</li></ul></li></ol><h2 id="四、操作工艺及质量标准"><a href="#四、操作工艺及质量标准" class="headerlink" title="四、操作工艺及质量标准"></a>四、操作工艺及质量标准</h2><ol><li><p><strong>工艺流程</strong></p><ul><li>墙面基层处理→弹线、分格、粘条→涮封闭底漆→喷真石漆→喷防水罩面漆→局部修补</li></ul></li><li><p><strong>墙面基层批刮腻子</strong></p><ul><li>采用外墙防水腻子进行批刮找平和局部处理，确保外墙面平整度，腻子采用成品腻子，现场加水调制。</li><li>腻子干固后进行打磨，至表面无刮痕，并清除浮灰，表面平整度控制在2mm以内。</li></ul></li><li><p><strong>刷封闭底漆</strong></p><ul><li>将封闭底漆滚刷在基层上，要求涂刷均匀、无漏刷。可采用滚刷、刷涂、喷涂施工，涂层要均匀，厚薄要一致，确保无透底和流挂。</li><li>底漆喷涂施工结束后，施工工具应及时清洗，清洗后在阴凉处保存。</li><li>待底漆完全干固后，方可进行下道工序施工。</li></ul></li><li><p><strong>喷真石漆</strong></p><ul><li>采用喷涂是施工，从上到下按顺序进行；</li><li>施工喷涂时，接缝应设在分格缝或窗套等处，避免结合处出现色差；</li><li>施工后应达到色泽一致，无流挂透底，阴角处无积料；</li><li>点状均匀，大小符合要求。</li><li>在喷涂前，需进行试喷，以确定所用喷嘴、工作压力、喷枪移动速度等施工因素，要求：均匀平均、平整，无大面积的色差，无明显接槎，无流坠等。</li><li>施工喷涂前，必须彻底搅拌均匀，施工间隙应盖紧涂料桶盖，防止涂料结皮。</li></ul></li><li><p><strong>喷面漆</strong></p><ul><li>在喷漆之前，要对真石漆进行修正，达到平整、光滑，线条平直，无漏喷现象。</li><li>喷面漆的要求：均匀、无漏涮现象，线条清晰、平直、顺直，且要求真石漆实干。</li></ul></li><li><p>检查施工质量，对局部质量问题进行修补。</p></li></ol><h2 id="五、质量标准"><a href="#五、质量标准" class="headerlink" title="五、质量标准"></a>五、质量标准</h2><ol><li><p><strong>保证项目</strong></p><ul><li>产品的品种、颜色、质量必须符合设计要求，并按技术交底施工。</li></ul></li><li><p><strong>外观要求</strong></p><ul><li>喷涂表面颜色一致，花纹、花点大小均匀，无明显接槎、漏喷、漏涂、透底、流坠等现象。</li></ul></li></ol><h2 id="六、应当注意的质量及安全问题"><a href="#六、应当注意的质量及安全问题" class="headerlink" title="六、应当注意的质量及安全问题"></a>六、应当注意的质量及安全问题</h2><ol><li><p><strong>基层墙面的湿度影响</strong></p><ul><li>真石漆施工时对基层墙面相对湿度要求含水率＜10％，PH值7-9，否则建议不要施工。</li><li>湿度会影响真石漆的连接力，易造成脱落现象。</li></ul></li><li><p><strong>天气条件</strong></p><ul><li>不能在高温天气、雨天和大风天气施工。</li><li>喷涂真石漆后24小时之内严禁淋雨，施工前做好天气预报和预防工作。</li></ul></li><li><p><strong>脚手架要求</strong></p><ul><li>施工时，脚手架应距离墙面30cm左右，如距离太近，上下层脚手架间喷涂部分可能有接痕，影响装饰效果。</li></ul></li><li><p><strong>防护措施</strong></p><ul><li>不喷涂部分及物件，应用挡板或纸张等隔开。</li></ul></li><li><p><strong>安全注意事项</strong></p><ul><li>油性底漆、罩面漆属易燃危险品，施工时应严禁烟火。</li><li>油性底漆、罩面漆施工完毕，工具即用二甲苯等溶剂进行清洗。</li><li>在施工过程中，严禁在用料中随意加水稀释。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;真石漆施工方案&quot;&gt;&lt;a href=&quot;#真石漆施工方案&quot; class=&quot;headerlink&quot; title=&quot;真石漆施工方案&quot;&gt;&lt;/a&gt;真石漆施工方案&lt;/h1&gt;
&lt;div id=&quot;doc-hgb52z05m&quot; 
     data-doc-viewer=&quot;true&quot;</summary>
      
    
    
    
    <category term="真石漆" scheme="http://example.com/category/%E7%9C%9F%E7%9F%B3%E6%BC%86/"/>
    
    
    <category term="文档" scheme="http://example.com/tag/%E6%96%87%E6%A1%A3/"/>
    
    <category term="施工方案" scheme="http://example.com/tag/%E6%96%BD%E5%B7%A5%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
</feed>
